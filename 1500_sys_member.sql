-- MEMBER

create table if not exists public.sys_member (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  member_no text not null default nanoid (12, '0123456789'::text),
  name text not null,
  is_active boolean null default true,
  auth_id uuid null,
  score double precision null default '0'::double precision,
  telegram_user_id bigint null,
  language text null,
  constraint sys_member_pkey primary key (id),
  constraint sys_member_auth_id_key unique (auth_id),
  constraint sys_member_member_no_key unique (member_no),
  constraint sys_member_telegram_user_id_key unique (telegram_user_id),
  constraint sys_member_auth_id_fkey foreign KEY (auth_id) references auth.users (id)
) TABLESPACE pg_default;

alter table public.sys_member alter column member_no set default nanoid(12, '0123456789');

-- FUNCTION on_sys_member_inserted
drop function if exists public.on_sys_member_inserted cascade;

create function public.on_sys_member_inserted () returns trigger
set
  search_path = '' as $$ -- PRIVATE FUNCTION
declare
begin
  -- CREATE sys_member_data
  INSERT INTO public.sys_member_data (
    id,
    auth_id
  ) values (
    new.id,
    new.auth_id
  );

return new;
end;
$$ language plpgsql security definer;

create trigger on_sys_member_inserted after insert on sys_member for each row
execute function on_sys_member_inserted ();
