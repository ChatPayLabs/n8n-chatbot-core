-- AGENT

create table if not exists public.sys_agent (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  agent_no text not null default nanoid (12, '0123456789'::text),
  full_agent_no text null,
  name text not null,
  is_active boolean null default true,
  service_no text not null,
  auth_id uuid null,
  member_no text null,
  country text null,
  score double precision null default '0'::double precision,
  currency text null,
  timezone text null,
  constraint sys_agent_pkey primary key (id),
  constraint sys_agent_full_agent_no_key unique (full_agent_no),
  constraint sys_agent_auth_id_fkey foreign KEY (auth_id) references auth.users (id),
  constraint sys_agent_member_no_fkey foreign KEY (member_no) references sys_member (member_no) on update CASCADE,
  constraint sys_agent_service_no_fkey foreign KEY (service_no) references sys_service (full_service_no) on update CASCADE
) TABLESPACE pg_default;

alter table public.sys_agent alter column agent_no set default nanoid(12, '0123456789');

-- FUNCTION on_sys_agent_insert
drop function if exists public.on_sys_agent_insert cascade;

create function public.on_sys_agent_insert () returns trigger
set
  search_path = '' as $$ -- PRIVATE FUNCTION
declare
  _sys_service public.sys_service;
begin
  -- find service
  SELECT * FROM public.sys_service WHERE full_service_no = new.service_no INTO _sys_service;

  -- override
  new.country = _sys_service.country;
  new.currency = _sys_service.currency;
  new.timezone = _sys_service.timezone;

  new.full_agent_no := new.service_no || ':' || new.agent_no;

return new;
end;
$$ language plpgsql security definer;

create trigger on_sys_agent_insert before insert on sys_agent for each row
execute function on_sys_agent_insert ();
